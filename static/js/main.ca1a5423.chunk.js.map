{"version":3,"sources":["components/validname.jsx","components/validEmail.jsx","components/finalpost.jsx","components/form.jsx","App.js","reportWebVitals.js","index.js"],"names":["ValidateName","name","i","length","ValidateEmail","email","n","f1","f2","FinalPost","interests","a","fetch","method","headers","body","JSON","stringify","console","log","Form","useState","setName","setEmail","error","setError","items","setItems","interest","setInterest","getData","e","axios","get","newData","arr","data","results","num","number","newItems","label","value","undefined","className","action","type","onChange","target","placeholder","htmlFor","isMulti","onInputChange","event","Array","isArray","map","x","options","onClick","alert","window","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca1a5423.chunk.js","sourcesContent":["const ValidateName = (name) => {\r\n    if(name === \"\"){\r\n        return \"Please fill username\";\r\n    }\r\n    for(let i=0;i<name.length;i++){\r\n        if(name[i] >= '0' && name[i] <='9'){ return \"Invalid Username!\";}\r\n        if(name[i] === '!' || name[i] === '@' || name[i] === '#' || name[i] === '$' || name[i] === '%'){\r\n            return \"Invalid Username!\";\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport default ValidateName;","const ValidateEmail = (email) => {\r\n    if(email === \"\"){ return \"Please Enter your Email\";}\r\n    if(email.length < 6){ return \"Invalid Email\";}\r\n    let f1=-1, f2=-1, n;\r\n    n=email.length;\r\n    for(let i=0;i<n;i++){\r\n        if(email[i] === '@'){ f1=i;}\r\n        if(email[i] === '.'){ f2=i;}\r\n    }\r\n    if(f1 === -1 || f2 === -1 || f1 === 0 || f2 === 0 || f1 === n-1 || f2 ===n-1 || f1+1 === f2){\r\n        return \"Invalid Email\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport default ValidateEmail;","const FinalPost = async (name, email, interests) => {\r\n    try{\r\n        let result = await fetch('https://testpostapi1.p.rapidapi.com/testBatmanApi/name/register',{\r\n            method: 'post',\r\n            headers: {\r\n                'accept': 'success',\r\n                'content-type': 'application/x-www-form-urlencoded',\r\n                'x-rapidapi-host': 'testpostapi1.p.rapidapi.com',\r\n                'x-rapidapi-key': '28728db04dmsh34d3f140dd059fap1c388ejsn7288577afcf7'\r\n            },\r\n            body: JSON.stringify({\r\n                'name': `${name}`,\r\n                'email': `${email}`,\r\n                'interests': `${interests}`\r\n            })\r\n        });\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport default FinalPost;","import React,{useState} from 'react';\r\nimport ValidateName from './validname';\r\nimport ValidateEmail from './validEmail';\r\nimport FinalPost from './finalpost';\r\nimport Select from 'react-select';\r\nimport axios from 'axios';\r\nimport { getDefaultNormalizer } from '@testing-library/react';\r\nconst Form = () => {\r\n    const [name,setName] = useState(\"\");\r\n    const [email,setEmail] = useState(\"\");\r\n    const [error,setError] = useState(\"\");\r\n    const [items,setItems] = useState([]);\r\n    const [interest,setInterest] = useState([]);\r\n\r\n    const handleName = (e) => { setName(e.target.value);}\r\n    const handleEmail = (e) => { setEmail(e.target.value);}\r\n    \r\n    const postData = () => {\r\n        FinalPost(name,email,interest);\r\n        alert(\"You are successfully registered!\");\r\n        window.location.reload();\r\n    } \r\n\r\n    const validateForm = () => {\r\n        if(ValidateName(name) !== \"\"){ setError(ValidateName(name)); return;}\r\n        if(ValidateEmail(email) !== \"\"){ setError(ValidateEmail(email)); return;}\r\n        if(interest.length === 0){ setError(\"Please select your interests!\"); return;}\r\n        setError(\"\");\r\n        postData();\r\n    }\r\n\r\n    const getData = async (e) => {\r\n        const newData = await axios.get(`https://webit-keyword-search.p.rapidapi.com/autosuggest?q=${e}&language=en&rapidapi-key=28728db04dmsh34d3f140dd059fap1c388ejsn7288577afcf7`);\r\n        const arr = newData.data.data.results;\r\n        const num = newData.data.data.number;\r\n        const newItems = [];\r\n        for(let i=0;i<num;i++){\r\n            newItems[i] = {label:arr[i], value:i+1};\r\n        }\r\n        if(newItems[0].label === undefined){ setItems([]);}\r\n        else{ setItems(newItems);}\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        if(interest.length >= 3){ setError(\"There can be atmost 3 interests!\"); setItems([]); return;}\r\n        if(event.length >= 2){ getData(event);}\r\n        setError(\"\");\r\n    }\r\n\r\n    const handleSelect = (e) => { \r\n        setInterest(Array.isArray(e) ? e.map(x => x.label) : []);\r\n    }\r\n\r\n    return(\r\n        <div className=\"l-form\">\r\n            <form action=\"\" className=\"form\">\r\n                <h1 className=\"form-title\">Sign In</h1>\r\n                <div className=\"query\">\r\n                    {error}\r\n                </div>\r\n                <div className=\"form-div\">\r\n                    <input type=\"text\" value={name} onChange={handleName} className=\"form-input\" placeholder=\" \" />\r\n                    <label htmlFor=\"\" className=\"form-label\">Username</label>\r\n                </div>\r\n                <div className=\"form-div\">\r\n                    <input type=\"email\" value={email} onChange={handleEmail} className=\"form-input\" placeholder=\" \" />\r\n                    <label htmlFor=\"\" className=\"form-label\">Email</label>\r\n                </div>\r\n                <div className=\"form-div\">\r\n                <Select isMulti className=\"form-input form-select\" onInputChange={handleChange} onChange={handleSelect} placeholder=\"select almost 3 items..\" options={items} />\r\n                    <label htmlFor=\"\" className=\"form-label\">Interest</label>\r\n                </div>\r\n                <input type=\"button\" onClick={validateForm} className=\"form-button\" value=\"Sign In\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import \"./App.css\";\nimport Form from \"./components/form\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}